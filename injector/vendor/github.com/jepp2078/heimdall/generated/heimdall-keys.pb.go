// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heimdall-keys.proto

package generated

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_5252a9caa9ddb976, []int{0}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Namespace struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_5252a9caa9ddb976, []int{1}
}

func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespace.Unmarshal(m, b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
}
func (m *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(m, src)
}
func (m *Namespace) XXX_Size() int {
	return xxx_messageInfo_Namespace.Size(m)
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*Key)(nil), "generated.Key")
	proto.RegisterType((*Namespace)(nil), "generated.Namespace")
}

func init() { proto.RegisterFile("heimdall-keys.proto", fileDescriptor_5252a9caa9ddb976) }

var fileDescriptor_5252a9caa9ddb976 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x48, 0xcd, 0xcc,
	0x4d, 0x49, 0xcc, 0xc9, 0xd1, 0xcd, 0x4e, 0xad, 0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4c, 0x4f, 0xcd, 0x4b, 0x2d, 0x4a, 0x2c, 0x49, 0x4d, 0x51, 0x12, 0xe7, 0x62, 0xf6, 0x4e,
	0xad, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0x31, 0x95, 0x34, 0xb9, 0x38, 0xfd, 0x12, 0x73, 0x53, 0x8b, 0x0b, 0x12, 0x93, 0x53, 0x85, 0x64,
	0xb8, 0x38, 0xf3, 0x60, 0x1c, 0xa8, 0x22, 0x84, 0x80, 0x51, 0x3d, 0x17, 0x8f, 0x07, 0xd4, 0x16,
	0xef, 0xd4, 0xca, 0x62, 0x21, 0x73, 0x2e, 0x5e, 0xf7, 0xd4, 0x92, 0x80, 0xa2, 0xcc, 0xb2, 0xc4,
	0x92, 0x54, 0x90, 0xe9, 0x22, 0x7a, 0x70, 0x0b, 0xf5, 0xe0, 0x86, 0x4a, 0xf1, 0x21, 0x89, 0x7a,
	0xa7, 0x56, 0x2a, 0x31, 0x08, 0x99, 0x71, 0xf1, 0x80, 0x34, 0x96, 0x26, 0xe5, 0x64, 0x26, 0x93,
	0xa0, 0x2f, 0x89, 0x0d, 0xec, 0x2d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x4a, 0x7e,
	0x30, 0xed, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeimdallKeysClient is the client API for HeimdallKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeimdallKeysClient interface {
	GetPrivateKey(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Key, error)
	GetPublicKey(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Key, error)
}

type heimdallKeysClient struct {
	cc *grpc.ClientConn
}

func NewHeimdallKeysClient(cc *grpc.ClientConn) HeimdallKeysClient {
	return &heimdallKeysClient{cc}
}

func (c *heimdallKeysClient) GetPrivateKey(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/generated.HeimdallKeys/GetPrivateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *heimdallKeysClient) GetPublicKey(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/generated.HeimdallKeys/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeimdallKeysServer is the server API for HeimdallKeys service.
type HeimdallKeysServer interface {
	GetPrivateKey(context.Context, *Namespace) (*Key, error)
	GetPublicKey(context.Context, *Namespace) (*Key, error)
}

func RegisterHeimdallKeysServer(s *grpc.Server, srv HeimdallKeysServer) {
	s.RegisterService(&_HeimdallKeys_serviceDesc, srv)
}

func _HeimdallKeys_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeimdallKeysServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.HeimdallKeys/GetPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeimdallKeysServer).GetPrivateKey(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeimdallKeys_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeimdallKeysServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.HeimdallKeys/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeimdallKeysServer).GetPublicKey(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeimdallKeys_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.HeimdallKeys",
	HandlerType: (*HeimdallKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrivateKey",
			Handler:    _HeimdallKeys_GetPrivateKey_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _HeimdallKeys_GetPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdall-keys.proto",
}
